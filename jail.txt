--@name Jail
--@author PrikolMen:-b
--@includedir starfall_plib
--@server

--[[-----------------
    Configuration
-----------------]]--
local CHAT_COMMAND = '/pjail'
local CHAT_COMMAND2 = '/punjail'
local LOCK_TARGET = true

--[[-----------------
         Code
-----------------]]--
dofile( 'starfall_plib/init.txt' )
local model = 'models/props_building_details/Storefront_Template001a_Bars.mdl'
local chipName = 'PLib - Jail'
local pcall = pcall
local plib = plib
local hook = hook

local ply = nil
plib.ChatCommandAdd(CHAT_COMMAND, function( pl, _, __, nickName )
    if !plib.IsOwner( pl ) then return end
    local plys = find.playersByName( nickName )
    if (plys) then
        local target = find.closest( plys, pl:getPos() )
        if isValid( target ) then
            ply = target
            plib.Log( chipName, 'Jailed: ' .. target:getName() )
        end
    end
end)

local walls = {
    {
        ['Pos'] = Vector( 0, 0, -1 ),
        ['Ang'] = Angle( 90, 0, 0 )
    },
    {
        ['Pos'] = Vector( 0, 0, 50 * 2 + 1 ),
        ['Ang'] = Angle( 90, 0, 0 )
    },
    {
        ['Pos'] = Vector( 51, 0, 50 ),
        ['Ang'] = Angle( 0, 0, 0 )
    },
    {
        ['Pos'] = Vector( -51, 0, 50 ),
        ['Ang'] = Angle( 0, 180, 0 )
    },
    {
        ['Pos'] = Vector( 0, -30, 29 ),
        ['Ang'] = Angle( 180, 90, 90 )
    },
    {
        ['Pos'] = Vector( 0, 30, 29 ),
        ['Ang'] = Angle( 180, -90, 90 )
    },
    {
        ['Pos'] = Vector( 0, -30, 71 ),
        ['Ang'] = Angle( 180, 90, 90 )
    },
    {
        ['Pos'] = Vector( 0, 30, 71 ),
        ['Ang'] = Angle( 180, -90, 90 )
    },
}

if LOCK_TARGET then
    for _, wall in ipairs( walls ) do
        wall.Pos[3] = wall.Pos[3] + 4
    end
else
    for _, wall in ipairs( walls ) do
        wall.Pos[3] = wall.Pos[3] - 1
    end
end

plib.ChatCommandAdd(CHAT_COMMAND2, function( pl, _, __, nickName )
    if !plib.IsOwner( pl ) then return end
    ply = nil

    for _, tbl in ipairs( walls ) do
        local fence = tbl.Entity
        if IsValid( fence ) then
            fence:remove()
        end 
    end
end)

hook.add('think', chipName, function()
    if IsValid( ply ) and ply:isAlive() then
        for _, tbl in ipairs( walls ) do
            local fence = tbl.Entity
            if IsValid( fence ) then
                fence:setAngles( ply:getAngles() + tbl.Ang )
                fence:setPos( ply:localToWorld( tbl.Pos ) )
                continue
            end

            if prop.canSpawn() then
                local ok, ent = pcall( prop.create, ply:localToWorld( tbl.Pos ), ply:getAngles() + tbl.Ang, model, true )
                if (ok) then
                    tbl.Entity = ent
                end
            end
        end
    end
end)