--@name Text-To-Speech
--@author PrikolMen:-b
--@includedir starfall_plib
--@shared

--[[-----------------
    Configuration
-----------------]]--

-- Audio volume in %
local VOLUME = 1000

-- TTS hear distantion in hammer units
local HEAR_DIST = 1024

-- All chat messages will be converted to tts
local AUTO_TTS = true

-- TTS by chat command
local CHAT_COMMAND = '/ptts'

-- Dead Palyers can't talk?
local DEAD_CANT_TALK = true

-- Dead Palyers can't hear?
local DEAD_CANT_HEAR = true

-- Hide messages in chat
local HIDE_CHAT_MESSAGES = false

--[[-----------------
         Code
-----------------]]--

dofile( 'starfall_plib/init.txt' )
local chipName = 'PLib - TTS'
local ipairs = ipairs
local plib = plib
local hook = hook
local net = net

if (CLIENT) then

    local plib_GetEntityCenterPos = plib.GetEntityCenterPos
    local isValid = isValid
    local audioChannel = nil

    net.receive( chipName, function()
        local ply = net.readEntity()
        if !isValid( ply ) then
            return
        end

        plib.PlayTTS(net.readString(), '3d', function( channel )
            if isValid( audioChannel ) then
                audioChannel:stop()
            end

            audioChannel = channel
            channel:setPos( plib_GetEntityCenterPos( ply ) )
            channel:setFade( 200, HEAR_DIST * 2 )
            channel:setVolume( VOLUME / 100 )
            channel:play()
        end )
    end )

    local localPlayer = plib.Player
    local owner = plib.Owner

    hook.add( 'think', chipName, function()
        if !isValid( owner ) then
            hook.remove( 'think', chipName )
            return
        end

        if !isValid( audioChannel ) then
            return
        end

        if ( !DEAD_CANT_TALK or owner:isAlive() ) then
            if ( !DEAD_CANT_HEAR or localPlayer:isAlive() ) then
                audioChannel:setPos( plib.GetEntityCenterPos( owner ) )
                audioChannel:setVolume( VOLUME / 100 )
            else
                audioChannel:setVolume( 0 )
            end
        else
            audioChannel:stop()
        end
    end )

end

if (SERVER) then

    local find_inSphere = find.inSphere

    local function tts( ply, text, isTeam )
        local whoHear = {}
        local playerTeam = ply:getTeam()
        for _, pl in ipairs( find_inSphere( ply:getEyePos(), HEAR_DIST ) ) do
            if pl:isPlayer() and ( !DEAD_CANT_HEAR or ply:isAlive() ) and ( !isTeam or pl:getTeam() == playerTeam ) then
                whoHear[ #whoHear + 1 ] = pl
            end
        end

        if #whoHear > 0 then
            net.start( chipName )
                net.writeEntity( ply )
                net.writeString( text )
            net.send( whoHear )
        end

        if HIDE_CHAT_MESSAGES then
            return ''
        end
    end

    hook.add( 'PostPlayerSay', chipName, function( ply, text, isTeam )
        if !plib.IsOwner( ply ) then return end
        if !AUTO_TTS or string.startWith( text, '/' ) then
            return
        end

        return tts( ply, text, isTeam )
    end )

    plib.ChatCommandAdd( CHAT_COMMAND, function( ply, _, __, text, isTeam )
        if !plib.IsOwner( ply ) then return end
        tts( ply, text, isTeam )
    end )

end
