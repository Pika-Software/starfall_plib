--@name Healing
--@author PrikolMen:-b
--@includedir starfall_plib
--@server

--[[-----------------
    Configuration
-----------------]]--
local HEALTH_GIVE = true
local ARMOR_GIVE = true

--[[-----------------
         Code
-----------------]]--
dofile( 'starfall_plib/init.txt' )
local prop_spawnRate = prop.spawnRate
local isValid = isValid
local timer = timer
local plib = plib
local math = math
local hook = hook

local chipName = 'PLib - Healing'
local healthHookName = chipName .. ' / HEALTH'
local armorHookName = chipName .. ' / ARMOR'

hook.add( 'EntityTakeDamage', chipName, function( ply )
    if plib.IsOwner( ply ) and ply:isAlive() then
        timer.simple( 0, function()
            if not isValid( ply ) or not ply:isAlive() then return end

            if HEALTH_GIVE then
                local nextHealthSpawnTime = 0
                hook.add( 'think', healthHookName, function()
                    if nextHealthSpawnTime > timer.curtime() then return end
                    nextHealthSpawnTime = timer.curtime() + (1 / prop_spawnRate()) + math.rand( 0, 2 )

                    if isValid( ply ) and ply:isAlive() and ply:getHealth() < ply:getMaxHealth() then
                        plib.Heal( ply )
                        return
                    end

                    hook.remove( 'think', healthHookName )
                end )
            end

            if ARMOR_GIVE then
                local nextArmorSpawnTime = 0
                hook.add( 'think', armorHookName, function()
                    if nextArmorSpawnTime > timer.curtime() then return end
                    nextArmorSpawnTime = timer.curtime() + (1 / prop_spawnRate()) + math.rand( 0, 2 )

                    if isValid( ply ) and ply:isAlive() and ply:getArmor() < ply:getMaxArmor() then
                        plib.GiveArmor( ply )
                        return
                    end

                    hook.remove( 'think', armorHookName )
                end )
            end
        end )
    end
end )
