--@name Wall Watcher
--@author PrikolMen:-b
--@includedir starfall_plib
--@shared

--[[-----------------
    Configuration
-----------------]]--

-- Low Health Color
local CLIENT_DEATH_COLOR = Color( 250, 50, 50 )

-- Friend Filter
local CLIENT_IGNORE_FRIENDS = false

-- Update Time
local CLIENT_UPDATE_TIME = 0.05

-- PVS
local CLIENT_IGNORE_PVS = false

-- View distance
local SERVER_MAX_DISTANCE = -1

-- Player Filters
local SERVER_IGNORE_SUPERADMINS = false
local SERVER_IGNORE_ADMINS = false
local SERVER_IGNORE_NOCLIP = false
local SERVER_IGNORE_DEAD = true
local SERVER_IGNORE_GOD = false

-- CFC Starfall Ext
local SERVER_IGNORE_BUILDERS = true
local SERVER_IGNORE_PVPERS = false

-- Update Time
local SERVER_UPDATE_TIME = 1

--[[-----------------
         Code
-----------------]]--
dofile( 'starfall_plib/init.txt' )
local ipairs = ipairs
local table = table
local plib = plib
local net = net

local chipName = 'PLib - Wall Watcher'

if (CLIENT) then

    local hudEnabled = plib.EnableHUD( true )
    if (hudEnabled) then
        local players = {}

        local playersRender = {}
        local function updatePlayerRender()
            playersRender = {}
            
            for _, ply in ipairs( players ) do
                if ply and ply:isValid() and ( CLIENT_IGNORE_PVS or not ply:isDormant() ) and ( not CLIENT_IGNORE_FRIENDS or ply:getFriendStatus() ~= 'friend' ) then
                    local pos = ply:getPos()
                    local screenData = pos:toScreen()
                    if (screenData) then
                        playersRender[ #playersRender + 1 ] = { ply:getName(), plib.LerpColor( 1 - ( ply:getHealth() / ply:getMaxHealth() ), plib.GetPlayerTeamColor( ply ), CLIENT_DEATH_COLOR ), pos, ply:getAngles(), ply:obbMins(), ply:obbMaxs(), screenData.x, screenData.y, screenData.visible }
                    end
                end
            end
        end

        net.receive(chipName, function()
            players = {}
            
            for i = 1, net.readUInt( 8 ) do
                players[ i ] = entity( net.readUInt( 8 ) ) 
            end

            updatePlayerRender()
        end)

        timer.create(chipName, CLIENT_UPDATE_TIME, 0, updatePlayerRender)

        --[[------------------
                Render
        ------------------]]--

        do

            local render = render

            hook.add('postdrawtranslucentrenderables', chipName, function(_, skybox)
                if skybox then return end
                for i = 1, #playersRender do
                    local info = playersRender[ i ]
                    render.clearDepth()
                    render.setColor( info[2] )
                    render.draw3DWireframeBox( info[3], info[4], info[5], info[6] )
                end
            end)

            hook.add('drawhud', chipName, function()
                for i = 1, #playersRender do
                    local info = playersRender[ i ]
                    if (info[9]) then
                        render.setColor( info[2] )
                        render.drawSimpleText( info[7], info[8], info[1], 1, 2 )
                    end
                end
            end)

        end

    end

end

if (SERVER) then

    if SERVER_MAX_DISTANCE > 0 then
        SERVER_MAX_DISTANCE = SERVER_MAX_DISTANCE ^ 2
    end

    local function isAllowedToSee( ply, origin )
        if SERVER_MAX_DISTANCE ~= -1 and origin:getDistanceSqr( ply:getEyePos() ) > SERVER_MAX_DISTANCE then return false end
        if SERVER_IGNORE_BUILDERS and ply.isInBuild and ply:isInBuild() then return false end
        if SERVER_IGNORE_PVPERS and ply.isInPvp and ply:isInPvp() then return false end
        if SERVER_IGNORE_SUPERADMINS and ply:isSuperAdmin() then return false end
        if SERVER_IGNORE_NOCLIP and ply:isNoclipped() then return false end
        if SERVER_IGNORE_ADMINS and ply:isAdmin() then return false end
        if SERVER_IGNORE_GOD and ply:hasGodMode() then return false end
        if SERVER_IGNORE_DEAD and not ply:isAlive() then return false end
        return true
    end

    local find_allPlayers = find.allPlayers

    timer.create( chipName, SERVER_UPDATE_TIME, 0, function()
        local players, length = {}, 0
        
        local ownerEntity = owner()
        local origin = ownerEntity:getEyePos()

        local entities = find_allPlayers()
        for i = 1, #entities do
            local ply = entities[ i ]
            if ply ~= ownerEntity and isAllowedToSee( ply, origin ) then
                length = length + 1
                players[ length ] = ply
            end
        end

        if length ~= 0 then
            net.start( chipName )
            net.writeUInt( length, 8 )

            for i = 1, length, 1 do
                net.writeUInt( players[ i ]:entIndex(), 8 ) 
            end
            
            net.send( ownerEntity )
        end
    end )

end
